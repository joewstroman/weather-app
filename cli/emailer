#!/usr/bin/env node
const program    = require('commander');
const mysql      = require('mysql');
const fetch      = require('node-fetch');
const nodemailer = require('nodemailer');

require('dotenv').config({ path: '../.env' });

const DB_HOST  = process.env.MYSQL_DB_URL;
const DB_USER  = process.env.MYSQL_USER;
const DB_PASS  = process.env.MYSQL_PASSWORD;
const DB_NAME  = process.env.MYSQL_DB_NAME;
const DB_TABLE = process.env.MYSQL_TABLE_NAME;
const APIKEY   = process.env.DARK_SKY_API_KEY;
const GMAIL_USER_ADDRESS = process.env.GMAIL_USER_ADDRESS;
const GMAIL_PASSWORD = process.env.GMAIL_PASSWORD;

const historyBaseURI = "https://api.darksky.net/forecast/";

const niceWeather = {
  subject: "It's nice out! Enjoy a discount on us.",
  image: "http://www.irishnews.com/picturesarchive/irishnews/irishnews/2017/04/08/220013270-e3218419-f6a9-47f4-a93f-9d26cf765fe9.jpg",
  text: "It's such a nice day out, and to make it even brighter we're offering you a discount."
}

const badWeather = {
  subject: "Not so nice out? That's okay, enjoy a discount on us.",
  image: "http://www.pethealthnetwork.com/sites/default/files/cold-weather-tips-dogs-519388263_0.jpg",
  text: "Sometimes the weather isn't great, but there's always a way to make the day better.\nTo prove it here's a discount for you."
}

const neutralWeather = {
  subject: "Enjoy a discount on us.",
  image: "https://media.rbl.ms/image?u=%2Ffiles%2F2016%2F09%2F30%2F636108007660223475-117681935_200.gif&ho=https%3A%2F%2Faz616578.vo.msecnd.net&s=526&h=2cc957bac0261e01f47d00e9d5543e2dfb78c561501804d79e979cc76d6b30a8&size=980x&c=1268085081",
  text: "It's a regular day. But that doesn't mean it's not a good day.\nHere's a discount to start your day on the right track."
}

async function fetchRetry(url, options, n) {
  for (let i = 0; i < n; i++) {
      try {
          return await fetch(url, options);
      } catch (err) {
        console.log(`Error fetching data from: ${url}`);
        console.log(`Retrying ${n - i - 1} more times`);
        const isLastAttempt = i + 1 === n;
        if (isLastAttempt) throw err;
      }
  }
}

async function findUsualTemperature(entry) {
  var i;
  var currentTemp;
  var currentData;
  var date;
  var fetchOptions = {
    redirect: "follow",
    referrer: "no-referrer",
    cache: "no-cache",
    headers: { "Content-Type": "application/json" },
    method: "GET"
  }

  console.log("Fetching weather data for:", entry.location);
  
  for (i = 0; i < 2; i++) { 
    date = new Date();
    timestamp = Math.floor(date.setFullYear(date.getFullYear() + i) / 1000);
    
    var url = historyBaseURI + `${APIKEY}/${entry.latitude},${entry.longitude},${timestamp}?units=us&exclude=currently,minutely,flags`;

    var resp = await fetchRetry(url, fetchOptions, 5);
    
    if (resp.status === 200) {
        var json = await resp.json();

        if (i === 0) currentData = json.hourly.data[date.getHours()];
        else historicalData = json.hourly.data[date.getHours()];
        // The temperature data for a day in the future is calculated by historical data in the Dark Sky API
        // Paying for the API would allow for many calls to calculate a more recent average temperature over many days

    } else {
      console.log(`Error fetching data for ${entry.location}`);
      console.log(`${resp.status} - ${resp.statusText} - ${resp.url}`);
    }
  }
  

  var avgTemp = historicalData.temperature;
  var currentTemp = currentData.temperature;
  var currentClimate = currentData.summary;
  var precipIntensity = currentData.precipIntensity;

  console.log("=== Current Temp:", currentTemp);
  console.log("=== Climate:", currentClimate);
  console.log("=== Precip Intensity:", precipIntensity);
  console.log("=== Avg Temp:", avgTemp);
  
  if (currentTemp > avgTemp + 5 || currentClimate.toLowerCase().indexOf("clear") > -1 && currentData.precipIntensity === 0) {
    return [1, currentData];
  } else if (currentTemp < avgTemp - 5 || currentData.precipIntensity > 0.005) {
    return [-1, currentData];
  } else {
    return [0, currentData];
  }
}

async function sendEmail(email, type, data) {
  var mailObject;

  if (type === 1) mailObject = niceWeather;
  else if (type === -1) mailObject = badWeather;
  else mailObject = neutralWeather;

  let transporter = nodemailer.createTransport({
    host: 'smtp.gmail.com',
    port: 465,
    secure: true,
    auth: {
      user: GMAIL_USER_ADDRESS,
      pass: GMAIL_PASSWORD
    }
  });

  const mailOptions = {
    from: GMAIL_USER_ADDRESS,
    to: email,
    subject: mailObject.subject,
    html: `
      <div style="margin-bottom: 10px;">Current Weather: ${data.temperature} degrees and ${data.summary.toLowerCase()}</div>
      <div style="margin-bottom: 10px;">${mailObject.text}</div>
      <img src=${mailObject.image} border=1 width=300 height=300 />
    `
  };

  console.log(`=== Sending email to ${email}`);
  return await sender(transporter, mailOptions);
}


function query(conn, cmd) {
  return new Promise( ( resolve, reject ) => {
      conn.query( cmd, ( err, rows ) => {
        if ( err ) return reject( err );
        resolve( rows );
      } );
  } );
}

function sender(transporter, mailOptions) {
  return new Promise( ( resolve, reject ) => {
    transporter.sendMail(mailOptions, (err, info) => {
      if (err) {
        console.log(err);
        return reject(false);
      }
      else {
        console.log(mailOptions);
        resolve(true)
      }
    });
  });
}

async function sendAllEmailsInDatabase() {
  const conn = connectToDatabase();
  let rows = await query(conn, `select * from ${DB_TABLE} where isnew = 1 order by id;`).catch(handleRejection);

  for (i in rows) {
    await sendWelcomeEmail(rows[i], conn);
  }

  conn.end();
}

async function sendOneEmail(email) {
  const conn = connectToDatabase();
  conn.query(`select * from ${DB_TABLE} where email = '${email}';`, async function (error, results, fields) {
    if (error) throw error;
    if (results.length < 1) { 
        console.log(`${email} has not been submitted to database`);
    } else {
      await sendWelcomeEmail(results[0], conn);
    }
    conn.end();
  }); 
}

async function sendWelcomeEmail(entry, conn) {
  if (entry.isnew === 1) {
    const result = await findUsualTemperature(entry);
    const success = await sendEmail(entry.email, result[0], result[1]);
    if (success) conn.query(`update ${DB_TABLE} set isnew = 0 where email = '${entry.email}'`);
  } else {
    console.log(`Welcome email has previously been sent to ${entry.email}`);
  }
}

function connectToDatabase() {
  const conn = mysql.createConnection({
    host     : DB_HOST,
    user     : DB_USER,
    password : DB_PASS,
    database : DB_NAME
  });
  return conn;
}

function handleRejection(error) {
  console.log(error.code);
  console.log(error.sqlMessage);
} 

function testSend() {
  sendEmail(GMAIL_USER_ADDRESS, 1, { temperature: 80, summary: "clear" });
  sendEmail(GMAIL_USER_ADDRESS, -1, { temperature: 30, summary: "rainy" });
  sendEmail(GMAIL_USER_ADDRESS, 0, { temperature: 60, summary: "clear" })
}

program
  .version('0.1.0')
  .usage('Usage: send -e email | send --all')
  .command('send <email>')
  .option('-e, --email', 'Address to send weather powered email')
  .action(sendOneEmail)

program
  .version('0.1.0')
  .command('send-all')
  .action(sendAllEmailsInDatabase)

program
  .version('0.1.0')
  .command('test')
  .action(testSend)

program.parse(process.argv);
